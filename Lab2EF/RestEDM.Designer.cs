//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 28.03.2019 20:50:26
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Reflection;
using System.Linq.Expressions;
using System.Data.Entity.Core;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("RestModel", "fk_comment_order", "Order", RelationshipMultiplicity.One, typeof(RestModel.Order), "CommentOrComplains", RelationshipMultiplicity.Many, typeof(RestModel.CommentOrComplain), true)]
[assembly: EdmRelationshipAttribute("RestModel", "fk_dish_to_category", "DishCategory", RelationshipMultiplicity.ZeroOrOne, typeof(RestModel.DishCategory), "DishDictionaries", RelationshipMultiplicity.Many, typeof(RestModel.DishDictionary), true)]
[assembly: EdmRelationshipAttribute("RestModel", "fk_order_dish_dish", "DishDictionary", RelationshipMultiplicity.One, typeof(RestModel.DishDictionary), "DishesOrders", RelationshipMultiplicity.Many, typeof(RestModel.DishesOrder), true)]
[assembly: EdmRelationshipAttribute("RestModel", "fk_order_dish_order", "Order", RelationshipMultiplicity.One, typeof(RestModel.Order), "DishesOrders", RelationshipMultiplicity.Many, typeof(RestModel.DishesOrder), true)]
[assembly: EdmRelationshipAttribute("RestModel", "fk_staff_position", "Position", RelationshipMultiplicity.One, typeof(RestModel.Position), "Staffs", RelationshipMultiplicity.Many, typeof(RestModel.Staff), true)]

#endregion

namespace RestModel
{

    #region RestEntities

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class RestEntities : ObjectContext
    {
        #region Constructors

        /// <summary>
        /// Initialize a new RestEntities object.
        /// </summary>
        public RestEntities() : 
                base(@"metadata=C:\\Users\\User\\Desktop\\MVS\\Семестр_4_лаб_2_ИСтаТП\\Lab2EF\\Lab2EF\\RestEDM.csdl|C:\\Users\\User\\Desktop\\MVS\\Семестр_4_лаб_2_ИСтаТП\\Lab2EF\\Lab2EF\\RestEDM.ssdl|C:\\Users\\User\\Desktop\\MVS\\Семестр_4_лаб_2_ИСтаТП\\Lab2EF\\Lab2EF\\RestEDM.msl;provider=MySql.Data.MySqlClient;provider connection string=""persistsecurityinfo=True;server=localhost;user id=root;password=Kappa2012;database=rest;characterset=utf8""", "RestEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initializes a new RestEntities object using the connection string found in the 'RestEntities' section of the application configuration file.
        /// </summary>
        public RestEntities(string connectionString) : 
                base(connectionString, "RestEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new RestEntities object.
        /// </summary>
        public RestEntities(EntityConnection connection) : base(connection, "RestEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        #endregion

        #region Partial Methods

        partial void OnContextCreated();

        #endregion

        #region ObjectSet Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CommentOrComplain> CommentOrComplains
        {
            get
            {
                if ((_CommentOrComplains == null))
                {
                    _CommentOrComplains = base.CreateObjectSet<CommentOrComplain>("CommentOrComplains");
                }
                return _CommentOrComplains;
            }
        }
        private ObjectSet<CommentOrComplain> _CommentOrComplains;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DishCategory> DishCategories
        {
            get
            {
                if ((_DishCategories == null))
                {
                    _DishCategories = base.CreateObjectSet<DishCategory>("DishCategories");
                }
                return _DishCategories;
            }
        }
        private ObjectSet<DishCategory> _DishCategories;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DishDictionary> DishDictionaries
        {
            get
            {
                if ((_DishDictionaries == null))
                {
                    _DishDictionaries = base.CreateObjectSet<DishDictionary>("DishDictionaries");
                }
                return _DishDictionaries;
            }
        }
        private ObjectSet<DishDictionary> _DishDictionaries;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DishesOrder> DishesOrders
        {
            get
            {
                if ((_DishesOrders == null))
                {
                    _DishesOrders = base.CreateObjectSet<DishesOrder>("DishesOrders");
                }
                return _DishesOrders;
            }
        }
        private ObjectSet<DishesOrder> _DishesOrders;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Order> Orders
        {
            get
            {
                if ((_Orders == null))
                {
                    _Orders = base.CreateObjectSet<Order>("Orders");
                }
                return _Orders;
            }
        }
        private ObjectSet<Order> _Orders;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Position> Positions
        {
            get
            {
                if ((_Positions == null))
                {
                    _Positions = base.CreateObjectSet<Position>("Positions");
                }
                return _Positions;
            }
        }
        private ObjectSet<Position> _Positions;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Staff> Staffs
        {
            get
            {
                if ((_Staffs == null))
                {
                    _Staffs = base.CreateObjectSet<Staff>("Staffs");
                }
                return _Staffs;
            }
        }
        private ObjectSet<Staff> _Staffs;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<User> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DishMenu> DishMenus
        {
            get
            {
                if ((_DishMenus == null))
                {
                    _DishMenus = base.CreateObjectSet<DishMenu>("DishMenus");
                }
                return _DishMenus;
            }
        }
        private ObjectSet<DishMenu> _DishMenus;

        #endregion
        #region AddTo Methods

        /// <summary>
        /// Deprecated Method for adding a new object to the CommentOrComplains EntitySet.
        /// </summary>
        public void AddToCommentOrComplains(CommentOrComplain commentOrComplain)
        {
            base.AddObject("CommentOrComplains", commentOrComplain);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the DishCategories EntitySet.
        /// </summary>
        public void AddToDishCategories(DishCategory dishCategory)
        {
            base.AddObject("DishCategories", dishCategory);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the DishDictionaries EntitySet.
        /// </summary>
        public void AddToDishDictionaries(DishDictionary dishDictionary)
        {
            base.AddObject("DishDictionaries", dishDictionary);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the DishesOrders EntitySet.
        /// </summary>
        public void AddToDishesOrders(DishesOrder dishesOrder)
        {
            base.AddObject("DishesOrders", dishesOrder);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Orders EntitySet.
        /// </summary>
        public void AddToOrders(Order order)
        {
            base.AddObject("Orders", order);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Positions EntitySet.
        /// </summary>
        public void AddToPositions(Position position)
        {
            base.AddObject("Positions", position);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Staffs EntitySet.
        /// </summary>
        public void AddToStaffs(Staff staff)
        {
            base.AddObject("Staffs", staff);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Users EntitySet.
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the DishMenus EntitySet.
        /// </summary>
        public void AddToDishMenus(DishMenu dishMenu)
        {
            base.AddObject("DishMenus", dishMenu);
        }

        #endregion
    }

    #endregion
}

namespace RestModel
{

    /// <summary>
    /// There are no comments for RestModel.CommentOrComplain in the schema.
    /// </summary>
    /// <KeyProperties>
    /// CommentOrComplainId
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="RestModel", Name="CommentOrComplain")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CommentOrComplain : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new CommentOrComplain object.
        /// </summary>
        /// <param name="commentOrComplainId">Initial value of CommentOrComplainId.</param>
        /// <param name="name">Initial value of Name.</param>
        /// <param name="comment">Initial value of Comment.</param>
        /// <param name="orderId">Initial value of OrderId.</param>
        public static CommentOrComplain CreateCommentOrComplain(int commentOrComplainId, string name, string comment, int orderId)
        {
            CommentOrComplain commentOrComplain = new CommentOrComplain();
            commentOrComplain.CommentOrComplainId = commentOrComplainId;
            commentOrComplain.Name = name;
            commentOrComplain.Comment = comment;
            commentOrComplain.OrderId = orderId;
            return commentOrComplain;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for CommentOrComplainId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int CommentOrComplainId
        {
            get
            {
                int value = _CommentOrComplainId;
                OnGetCommentOrComplainId(ref value);
                return value;
            }
            set
            {
                if (_CommentOrComplainId != value)
                {
                  OnCommentOrComplainIdChanging(ref value);
                  ReportPropertyChanging("CommentOrComplainId");
                  _CommentOrComplainId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CommentOrComplainId");
                  OnCommentOrComplainIdChanged();
              }
            }
        }
        private int _CommentOrComplainId = 1;
        partial void OnGetCommentOrComplainId(ref int value);
        partial void OnCommentOrComplainIdChanging(ref int value);
        partial void OnCommentOrComplainIdChanged();
    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Name
        {
            get
            {
                string value = _Name;
                OnGetName(ref value);
                return value;
            }
            set
            {
                if (_Name != value)
                {
                  OnNameChanging(ref value);
                  ReportPropertyChanging("Name");
                  _Name = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Name");
                  OnNameChanged();
              }
            }
        }
        private string _Name;
        partial void OnGetName(ref string value);
        partial void OnNameChanging(ref string value);
        partial void OnNameChanged();
    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Email
        {
            get
            {
                string value = _Email;
                OnGetEmail(ref value);
                return value;
            }
            set
            {
                if (_Email != value)
                {
                  OnEmailChanging(ref value);
                  ReportPropertyChanging("Email");
                  _Email = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Email");
                  OnEmailChanged();
              }
            }
        }
        private string _Email;
        partial void OnGetEmail(ref string value);
        partial void OnEmailChanging(ref string value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// There are no comments for Comment in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Comment
        {
            get
            {
                string value = _Comment;
                OnGetComment(ref value);
                return value;
            }
            set
            {
                if (_Comment != value)
                {
                  OnCommentChanging(ref value);
                  ReportPropertyChanging("Comment");
                  _Comment = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Comment");
                  OnCommentChanged();
              }
            }
        }
        private string _Comment;
        partial void OnGetComment(ref string value);
        partial void OnCommentChanging(ref string value);
        partial void OnCommentChanged();
    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int OrderId
        {
            get
            {
                int value = _OrderId;
                OnGetOrderId(ref value);
                return value;
            }
            set
            {
                if (_OrderId != value)
                {
                  OnOrderIdChanging(ref value);
                  ReportPropertyChanging("OrderId");
                  _OrderId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("OrderId");
                  OnOrderIdChanged();
              }
            }
        }
        private int _OrderId;
        partial void OnGetOrderId(ref int value);
        partial void OnOrderIdChanging(ref int value);
        partial void OnOrderIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Order in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RestModel", "fk_comment_order", "Order")]
        public virtual Order Order
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Order>("RestModel.fk_comment_order", "Order").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Order>("RestModel.fk_comment_order", "Order").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for Order in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Order> OrderReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Order>("RestModel.fk_comment_order", "Order");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Order>("RestModel.fk_comment_order", "Order", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Order>("RestModel.fk_comment_order", "Order").Value = null;
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for RestModel.DishCategory in the schema.
    /// </summary>
    /// <KeyProperties>
    /// CategoryId
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="RestModel", Name="DishCategory")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DishCategory : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new DishCategory object.
        /// </summary>
        /// <param name="categoryId">Initial value of CategoryId.</param>
        /// <param name="categoryName">Initial value of CategoryName.</param>
        public static DishCategory CreateDishCategory(int categoryId, string categoryName)
        {
            DishCategory dishCategory = new DishCategory();
            dishCategory.CategoryId = categoryId;
            dishCategory.CategoryName = categoryName;
            return dishCategory;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int CategoryId
        {
            get
            {
                int value = _CategoryId;
                OnGetCategoryId(ref value);
                return value;
            }
            set
            {
                if (_CategoryId != value)
                {
                  OnCategoryIdChanging(ref value);
                  ReportPropertyChanging("CategoryId");
                  _CategoryId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CategoryId");
                  OnCategoryIdChanged();
              }
            }
        }
        private int _CategoryId = 1;
        partial void OnGetCategoryId(ref int value);
        partial void OnCategoryIdChanging(ref int value);
        partial void OnCategoryIdChanged();
    
        /// <summary>
        /// There are no comments for CategoryName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CategoryName
        {
            get
            {
                string value = _CategoryName;
                OnGetCategoryName(ref value);
                return value;
            }
            set
            {
                if (_CategoryName != value)
                {
                  OnCategoryNameChanging(ref value);
                  ReportPropertyChanging("CategoryName");
                  _CategoryName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CategoryName");
                  OnCategoryNameChanged();
              }
            }
        }
        private string _CategoryName;
        partial void OnGetCategoryName(ref string value);
        partial void OnCategoryNameChanging(ref string value);
        partial void OnCategoryNameChanged();
    
        /// <summary>
        /// There are no comments for Notes in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Notes
        {
            get
            {
                string value = _Notes;
                OnGetNotes(ref value);
                return value;
            }
            set
            {
                if (_Notes != value)
                {
                  OnNotesChanging(ref value);
                  ReportPropertyChanging("Notes");
                  _Notes = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Notes");
                  OnNotesChanged();
              }
            }
        }
        private string _Notes;
        partial void OnGetNotes(ref string value);
        partial void OnNotesChanging(ref string value);
        partial void OnNotesChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for DishDictionaries in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RestModel", "fk_dish_to_category", "DishDictionaries")]
        public virtual EntityCollection<DishDictionary> DishDictionaries
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<DishDictionary>("RestModel.fk_dish_to_category", "DishDictionaries");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<DishDictionary>("RestModel.fk_dish_to_category", "DishDictionaries", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for RestModel.DishDictionary in the schema.
    /// </summary>
    /// <KeyProperties>
    /// DishId
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="RestModel", Name="DishDictionary")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DishDictionary : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new DishDictionary object.
        /// </summary>
        /// <param name="dishId">Initial value of DishId.</param>
        /// <param name="price">Initial value of Price.</param>
        /// <param name="amount">Initial value of Amount.</param>
        public static DishDictionary CreateDishDictionary(int dishId, int price, int amount)
        {
            DishDictionary dishDictionary = new DishDictionary();
            dishDictionary.DishId = dishId;
            dishDictionary.Price = price;
            dishDictionary.Amount = amount;
            return dishDictionary;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for DishId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int DishId
        {
            get
            {
                int value = _DishId;
                OnGetDishId(ref value);
                return value;
            }
            set
            {
                if (_DishId != value)
                {
                  OnDishIdChanging(ref value);
                  ReportPropertyChanging("DishId");
                  _DishId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DishId");
                  OnDishIdChanged();
              }
            }
        }
        private int _DishId = 1;
        partial void OnGetDishId(ref int value);
        partial void OnDishIdChanging(ref int value);
        partial void OnDishIdChanged();
    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Name
        {
            get
            {
                string value = _Name;
                OnGetName(ref value);
                return value;
            }
            set
            {
                if (_Name != value)
                {
                  OnNameChanging(ref value);
                  ReportPropertyChanging("Name");
                  _Name = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Name");
                  OnNameChanged();
              }
            }
        }
        private string _Name;
        partial void OnGetName(ref string value);
        partial void OnNameChanging(ref string value);
        partial void OnNameChanged();
    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Price
        {
            get
            {
                int value = _Price;
                OnGetPrice(ref value);
                return value;
            }
            set
            {
                if (_Price != value)
                {
                  OnPriceChanging(ref value);
                  ReportPropertyChanging("Price");
                  _Price = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Price");
                  OnPriceChanged();
              }
            }
        }
        private int _Price;
        partial void OnGetPrice(ref int value);
        partial void OnPriceChanging(ref int value);
        partial void OnPriceChanged();
    
        /// <summary>
        /// There are no comments for Amount in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Amount
        {
            get
            {
                int value = _Amount;
                OnGetAmount(ref value);
                return value;
            }
            set
            {
                if (_Amount != value)
                {
                  OnAmountChanging(ref value);
                  ReportPropertyChanging("Amount");
                  _Amount = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Amount");
                  OnAmountChanged();
              }
            }
        }
        private int _Amount;
        partial void OnGetAmount(ref int value);
        partial void OnAmountChanging(ref int value);
        partial void OnAmountChanged();
    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? CategoryId
        {
            get
            {
                int? value = _CategoryId;
                OnGetCategoryId(ref value);
                return value;
            }
            set
            {
                if (_CategoryId != value)
                {
                  OnCategoryIdChanging(ref value);
                  ReportPropertyChanging("CategoryId");
                  _CategoryId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CategoryId");
                  OnCategoryIdChanged();
              }
            }
        }
        private int? _CategoryId;
        partial void OnGetCategoryId(ref int? value);
        partial void OnCategoryIdChanging(ref int? value);
        partial void OnCategoryIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for DishCategory in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RestModel", "fk_dish_to_category", "DishCategory")]
        public virtual DishCategory DishCategory
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DishCategory>("RestModel.fk_dish_to_category", "DishCategory").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DishCategory>("RestModel.fk_dish_to_category", "DishCategory").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for DishCategory in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DishCategory> DishCategoryReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DishCategory>("RestModel.fk_dish_to_category", "DishCategory");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<DishCategory>("RestModel.fk_dish_to_category", "DishCategory", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DishCategory>("RestModel.fk_dish_to_category", "DishCategory").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for DishesOrders in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RestModel", "fk_order_dish_dish", "DishesOrders")]
        public virtual EntityCollection<DishesOrder> DishesOrders
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<DishesOrder>("RestModel.fk_order_dish_dish", "DishesOrders");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<DishesOrder>("RestModel.fk_order_dish_dish", "DishesOrders", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for RestModel.DishesOrder in the schema.
    /// </summary>
    /// <KeyProperties>
    /// DishesOrderId
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="RestModel", Name="DishesOrder")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DishesOrder : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new DishesOrder object.
        /// </summary>
        /// <param name="dishId">Initial value of DishId.</param>
        /// <param name="orderId">Initial value of OrderId.</param>
        /// <param name="dishesOrderId">Initial value of DishesOrderId.</param>
        public static DishesOrder CreateDishesOrder(int dishId, int orderId, int dishesOrderId)
        {
            DishesOrder dishesOrder = new DishesOrder();
            dishesOrder.DishId = dishId;
            dishesOrder.OrderId = orderId;
            dishesOrder.DishesOrderId = dishesOrderId;
            return dishesOrder;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for DishId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int DishId
        {
            get
            {
                int value = _DishId;
                OnGetDishId(ref value);
                return value;
            }
            set
            {
                if (_DishId != value)
                {
                  OnDishIdChanging(ref value);
                  ReportPropertyChanging("DishId");
                  _DishId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DishId");
                  OnDishIdChanged();
              }
            }
        }
        private int _DishId;
        partial void OnGetDishId(ref int value);
        partial void OnDishIdChanging(ref int value);
        partial void OnDishIdChanged();
    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int OrderId
        {
            get
            {
                int value = _OrderId;
                OnGetOrderId(ref value);
                return value;
            }
            set
            {
                if (_OrderId != value)
                {
                  OnOrderIdChanging(ref value);
                  ReportPropertyChanging("OrderId");
                  _OrderId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("OrderId");
                  OnOrderIdChanged();
              }
            }
        }
        private int _OrderId;
        partial void OnGetOrderId(ref int value);
        partial void OnOrderIdChanging(ref int value);
        partial void OnOrderIdChanged();
    
        /// <summary>
        /// There are no comments for DishesCount in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? DishesCount
        {
            get
            {
                int? value = _DishesCount;
                OnGetDishesCount(ref value);
                return value;
            }
            set
            {
                if (_DishesCount != value)
                {
                  OnDishesCountChanging(ref value);
                  ReportPropertyChanging("DishesCount");
                  _DishesCount = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DishesCount");
                  OnDishesCountChanged();
              }
            }
        }
        private int? _DishesCount;
        partial void OnGetDishesCount(ref int? value);
        partial void OnDishesCountChanging(ref int? value);
        partial void OnDishesCountChanged();
    
        /// <summary>
        /// There are no comments for DishesOrderId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int DishesOrderId
        {
            get
            {
                int value = _DishesOrderId;
                OnGetDishesOrderId(ref value);
                return value;
            }
            set
            {
                if (_DishesOrderId != value)
                {
                  OnDishesOrderIdChanging(ref value);
                  ReportPropertyChanging("DishesOrderId");
                  _DishesOrderId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DishesOrderId");
                  OnDishesOrderIdChanged();
              }
            }
        }
        private int _DishesOrderId = 1;
        partial void OnGetDishesOrderId(ref int value);
        partial void OnDishesOrderIdChanging(ref int value);
        partial void OnDishesOrderIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for DishDictionary in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RestModel", "fk_order_dish_dish", "DishDictionary")]
        public virtual DishDictionary DishDictionary
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DishDictionary>("RestModel.fk_order_dish_dish", "DishDictionary").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DishDictionary>("RestModel.fk_order_dish_dish", "DishDictionary").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for DishDictionary in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DishDictionary> DishDictionaryReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DishDictionary>("RestModel.fk_order_dish_dish", "DishDictionary");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<DishDictionary>("RestModel.fk_order_dish_dish", "DishDictionary", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DishDictionary>("RestModel.fk_order_dish_dish", "DishDictionary").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for Order in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RestModel", "fk_order_dish_order", "Order")]
        public virtual Order Order
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Order>("RestModel.fk_order_dish_order", "Order").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Order>("RestModel.fk_order_dish_order", "Order").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for Order in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Order> OrderReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Order>("RestModel.fk_order_dish_order", "Order");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Order>("RestModel.fk_order_dish_order", "Order", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Order>("RestModel.fk_order_dish_order", "Order").Value = null;
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for RestModel.Order in the schema.
    /// </summary>
    /// <KeyProperties>
    /// OrderId
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="RestModel", Name="Order")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Order : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Order object.
        /// </summary>
        /// <param name="orderId">Initial value of OrderId.</param>
        /// <param name="orderDate">Initial value of OrderDate.</param>
        public static Order CreateOrder(int orderId, global::System.DateTime orderDate)
        {
            Order order = new Order();
            order.OrderId = orderId;
            order.OrderDate = orderDate;
            return order;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int OrderId
        {
            get
            {
                int value = _OrderId;
                OnGetOrderId(ref value);
                return value;
            }
            set
            {
                if (_OrderId != value)
                {
                  OnOrderIdChanging(ref value);
                  ReportPropertyChanging("OrderId");
                  _OrderId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("OrderId");
                  OnOrderIdChanged();
              }
            }
        }
        private int _OrderId = 1;
        partial void OnGetOrderId(ref int value);
        partial void OnOrderIdChanging(ref int value);
        partial void OnOrderIdChanged();
    
        /// <summary>
        /// There are no comments for TableId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? TableId
        {
            get
            {
                int? value = _TableId;
                OnGetTableId(ref value);
                return value;
            }
            set
            {
                if (_TableId != value)
                {
                  OnTableIdChanging(ref value);
                  ReportPropertyChanging("TableId");
                  _TableId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TableId");
                  OnTableIdChanged();
              }
            }
        }
        private int? _TableId;
        partial void OnGetTableId(ref int? value);
        partial void OnTableIdChanging(ref int? value);
        partial void OnTableIdChanged();
    
        /// <summary>
        /// There are no comments for OrderDate in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual global::System.DateTime OrderDate
        {
            get
            {
                global::System.DateTime value = _OrderDate;
                OnGetOrderDate(ref value);
                return value;
            }
            set
            {
                if (_OrderDate != value)
                {
                  OnOrderDateChanging(ref value);
                  ReportPropertyChanging("OrderDate");
                  _OrderDate = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("OrderDate");
                  OnOrderDateChanged();
              }
            }
        }
        private global::System.DateTime _OrderDate;
        partial void OnGetOrderDate(ref global::System.DateTime value);
        partial void OnOrderDateChanging(ref global::System.DateTime value);
        partial void OnOrderDateChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for CommentOrComplains in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RestModel", "fk_comment_order", "CommentOrComplains")]
        public virtual EntityCollection<CommentOrComplain> CommentOrComplains
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<CommentOrComplain>("RestModel.fk_comment_order", "CommentOrComplains");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<CommentOrComplain>("RestModel.fk_comment_order", "CommentOrComplains", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for DishesOrders in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RestModel", "fk_order_dish_order", "DishesOrders")]
        public virtual EntityCollection<DishesOrder> DishesOrders
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<DishesOrder>("RestModel.fk_order_dish_order", "DishesOrders");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<DishesOrder>("RestModel.fk_order_dish_order", "DishesOrders", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for RestModel.Position in the schema.
    /// </summary>
    /// <KeyProperties>
    /// PositionId
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="RestModel", Name="Position")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Position : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Position object.
        /// </summary>
        /// <param name="positionId">Initial value of PositionId.</param>
        /// <param name="staffPosition">Initial value of StaffPosition.</param>
        /// <param name="salary">Initial value of Salary.</param>
        public static Position CreatePosition(int positionId, string staffPosition, int salary)
        {
            Position position = new Position();
            position.PositionId = positionId;
            position.StaffPosition = staffPosition;
            position.Salary = salary;
            return position;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for PositionId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int PositionId
        {
            get
            {
                int value = _PositionId;
                OnGetPositionId(ref value);
                return value;
            }
            set
            {
                if (_PositionId != value)
                {
                  OnPositionIdChanging(ref value);
                  ReportPropertyChanging("PositionId");
                  _PositionId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("PositionId");
                  OnPositionIdChanged();
              }
            }
        }
        private int _PositionId = 1;
        partial void OnGetPositionId(ref int value);
        partial void OnPositionIdChanging(ref int value);
        partial void OnPositionIdChanged();
    
        /// <summary>
        /// There are no comments for StaffPosition in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string StaffPosition
        {
            get
            {
                string value = _StaffPosition;
                OnGetStaffPosition(ref value);
                return value;
            }
            set
            {
                if (_StaffPosition != value)
                {
                  OnStaffPositionChanging(ref value);
                  ReportPropertyChanging("StaffPosition");
                  _StaffPosition = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("StaffPosition");
                  OnStaffPositionChanged();
              }
            }
        }
        private string _StaffPosition;
        partial void OnGetStaffPosition(ref string value);
        partial void OnStaffPositionChanging(ref string value);
        partial void OnStaffPositionChanged();
    
        /// <summary>
        /// There are no comments for Salary in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Salary
        {
            get
            {
                int value = _Salary;
                OnGetSalary(ref value);
                return value;
            }
            set
            {
                if (_Salary != value)
                {
                  OnSalaryChanging(ref value);
                  ReportPropertyChanging("Salary");
                  _Salary = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Salary");
                  OnSalaryChanged();
              }
            }
        }
        private int _Salary;
        partial void OnGetSalary(ref int value);
        partial void OnSalaryChanging(ref int value);
        partial void OnSalaryChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Staffs in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RestModel", "fk_staff_position", "Staffs")]
        public virtual EntityCollection<Staff> Staffs
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Staff>("RestModel.fk_staff_position", "Staffs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Staff>("RestModel.fk_staff_position", "Staffs", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for RestModel.Staff in the schema.
    /// </summary>
    /// <KeyProperties>
    /// StaffId
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="RestModel", Name="Staff")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Staff : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Staff object.
        /// </summary>
        /// <param name="staffId">Initial value of StaffId.</param>
        /// <param name="name">Initial value of Name.</param>
        /// <param name="positionId">Initial value of PositionId.</param>
        public static Staff CreateStaff(int staffId, string name, int positionId)
        {
            Staff staff = new Staff();
            staff.StaffId = staffId;
            staff.Name = name;
            staff.PositionId = positionId;
            return staff;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for StaffId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int StaffId
        {
            get
            {
                int value = _StaffId;
                OnGetStaffId(ref value);
                return value;
            }
            set
            {
                if (_StaffId != value)
                {
                  OnStaffIdChanging(ref value);
                  ReportPropertyChanging("StaffId");
                  _StaffId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("StaffId");
                  OnStaffIdChanged();
              }
            }
        }
        private int _StaffId;
        partial void OnGetStaffId(ref int value);
        partial void OnStaffIdChanging(ref int value);
        partial void OnStaffIdChanged();
    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Name
        {
            get
            {
                string value = _Name;
                OnGetName(ref value);
                return value;
            }
            set
            {
                if (_Name != value)
                {
                  OnNameChanging(ref value);
                  ReportPropertyChanging("Name");
                  _Name = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Name");
                  OnNameChanged();
              }
            }
        }
        private string _Name;
        partial void OnGetName(ref string value);
        partial void OnNameChanging(ref string value);
        partial void OnNameChanged();
    
        /// <summary>
        /// There are no comments for PassportId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string PassportId
        {
            get
            {
                string value = _PassportId;
                OnGetPassportId(ref value);
                return value;
            }
            set
            {
                if (_PassportId != value)
                {
                  OnPassportIdChanging(ref value);
                  ReportPropertyChanging("PassportId");
                  _PassportId = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("PassportId");
                  OnPassportIdChanged();
              }
            }
        }
        private string _PassportId;
        partial void OnGetPassportId(ref string value);
        partial void OnPassportIdChanging(ref string value);
        partial void OnPassportIdChanged();
    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Email
        {
            get
            {
                string value = _Email;
                OnGetEmail(ref value);
                return value;
            }
            set
            {
                if (_Email != value)
                {
                  OnEmailChanging(ref value);
                  ReportPropertyChanging("Email");
                  _Email = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Email");
                  OnEmailChanged();
              }
            }
        }
        private string _Email;
        partial void OnGetEmail(ref string value);
        partial void OnEmailChanging(ref string value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// There are no comments for PositionId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int PositionId
        {
            get
            {
                int value = _PositionId;
                OnGetPositionId(ref value);
                return value;
            }
            set
            {
                if (_PositionId != value)
                {
                  OnPositionIdChanging(ref value);
                  ReportPropertyChanging("PositionId");
                  _PositionId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("PositionId");
                  OnPositionIdChanged();
              }
            }
        }
        private int _PositionId;
        partial void OnGetPositionId(ref int value);
        partial void OnPositionIdChanging(ref int value);
        partial void OnPositionIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Position in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RestModel", "fk_staff_position", "Position")]
        public virtual Position Position
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Position>("RestModel.fk_staff_position", "Position").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Position>("RestModel.fk_staff_position", "Position").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for Position in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Position> PositionReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Position>("RestModel.fk_staff_position", "Position");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Position>("RestModel.fk_staff_position", "Position", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Position>("RestModel.fk_staff_position", "Position").Value = null;
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for RestModel.User in the schema.
    /// </summary>
    /// <KeyProperties>
    /// UserId
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="RestModel", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new User object.
        /// </summary>
        /// <param name="userId">Initial value of UserId.</param>
        /// <param name="hash">Initial value of Hash.</param>
        /// <param name="email">Initial value of Email.</param>
        public static User CreateUser(string userId, string hash, string email)
        {
            User user = new User();
            user.UserId = userId;
            user.Hash = hash;
            user.Email = email;
            return user;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string UserId
        {
            get
            {
                string value = _UserId;
                OnGetUserId(ref value);
                return value;
            }
            set
            {
                if (_UserId != value)
                {
                  OnUserIdChanging(ref value);
                  ReportPropertyChanging("UserId");
                  _UserId = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("UserId");
                  OnUserIdChanged();
              }
            }
        }
        private string _UserId;
        partial void OnGetUserId(ref string value);
        partial void OnUserIdChanging(ref string value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// There are no comments for Hash in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Hash
        {
            get
            {
                string value = _Hash;
                OnGetHash(ref value);
                return value;
            }
            set
            {
                if (_Hash != value)
                {
                  OnHashChanging(ref value);
                  ReportPropertyChanging("Hash");
                  _Hash = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Hash");
                  OnHashChanged();
              }
            }
        }
        private string _Hash;
        partial void OnGetHash(ref string value);
        partial void OnHashChanging(ref string value);
        partial void OnHashChanged();
    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Email
        {
            get
            {
                string value = _Email;
                OnGetEmail(ref value);
                return value;
            }
            set
            {
                if (_Email != value)
                {
                  OnEmailChanging(ref value);
                  ReportPropertyChanging("Email");
                  _Email = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Email");
                  OnEmailChanged();
              }
            }
        }
        private string _Email;
        partial void OnGetEmail(ref string value);
        partial void OnEmailChanging(ref string value);
        partial void OnEmailChanged();

        #endregion
    }

    /// <summary>
    /// VIEW
    /// </summary>
    /// <KeyProperties>
    /// DishId
    /// CategoryName
    /// Amount
    /// Price
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="RestModel", Name="DishMenu")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DishMenu : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new DishMenu object.
        /// </summary>
        /// <param name="dishId">Initial value of DishId.</param>
        /// <param name="categoryName">Initial value of CategoryName.</param>
        /// <param name="amount">Initial value of Amount.</param>
        /// <param name="price">Initial value of Price.</param>
        public static DishMenu CreateDishMenu(int dishId, string categoryName, int amount, int price)
        {
            DishMenu dishMenu = new DishMenu();
            dishMenu.DishId = dishId;
            dishMenu.CategoryName = categoryName;
            dishMenu.Amount = amount;
            dishMenu.Price = price;
            return dishMenu;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for DishId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int DishId
        {
            get
            {
                int value = _DishId;
                OnGetDishId(ref value);
                return value;
            }
            set
            {
                if (_DishId != value)
                {
                  OnDishIdChanging(ref value);
                  ReportPropertyChanging("DishId");
                  _DishId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DishId");
                  OnDishIdChanged();
              }
            }
        }
        private int _DishId;
        partial void OnGetDishId(ref int value);
        partial void OnDishIdChanging(ref int value);
        partial void OnDishIdChanged();
    
        /// <summary>
        /// There are no comments for CategoryName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CategoryName
        {
            get
            {
                string value = _CategoryName;
                OnGetCategoryName(ref value);
                return value;
            }
            set
            {
                if (_CategoryName != value)
                {
                  OnCategoryNameChanging(ref value);
                  ReportPropertyChanging("CategoryName");
                  _CategoryName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CategoryName");
                  OnCategoryNameChanged();
              }
            }
        }
        private string _CategoryName;
        partial void OnGetCategoryName(ref string value);
        partial void OnCategoryNameChanging(ref string value);
        partial void OnCategoryNameChanged();
    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Name
        {
            get
            {
                string value = _Name;
                OnGetName(ref value);
                return value;
            }
            set
            {
                if (_Name != value)
                {
                  OnNameChanging(ref value);
                  ReportPropertyChanging("Name");
                  _Name = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Name");
                  OnNameChanged();
              }
            }
        }
        private string _Name;
        partial void OnGetName(ref string value);
        partial void OnNameChanging(ref string value);
        partial void OnNameChanged();
    
        /// <summary>
        /// There are no comments for Amount in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Amount
        {
            get
            {
                int value = _Amount;
                OnGetAmount(ref value);
                return value;
            }
            set
            {
                if (_Amount != value)
                {
                  OnAmountChanging(ref value);
                  ReportPropertyChanging("Amount");
                  _Amount = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Amount");
                  OnAmountChanged();
              }
            }
        }
        private int _Amount;
        partial void OnGetAmount(ref int value);
        partial void OnAmountChanging(ref int value);
        partial void OnAmountChanged();
    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Price
        {
            get
            {
                int value = _Price;
                OnGetPrice(ref value);
                return value;
            }
            set
            {
                if (_Price != value)
                {
                  OnPriceChanging(ref value);
                  ReportPropertyChanging("Price");
                  _Price = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Price");
                  OnPriceChanged();
              }
            }
        }
        private int _Price;
        partial void OnGetPrice(ref int value);
        partial void OnPriceChanging(ref int value);
        partial void OnPriceChanged();
    
        /// <summary>
        /// There are no comments for Notes in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Notes
        {
            get
            {
                string value = _Notes;
                OnGetNotes(ref value);
                return value;
            }
            set
            {
                if (_Notes != value)
                {
                  OnNotesChanging(ref value);
                  ReportPropertyChanging("Notes");
                  _Notes = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Notes");
                  OnNotesChanged();
              }
            }
        }
        private string _Notes;
        partial void OnGetNotes(ref string value);
        partial void OnNotesChanging(ref string value);
        partial void OnNotesChanged();

        #endregion
    }

}
